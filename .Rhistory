# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_data)
# Check structure
str(spotify_data)
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_data)
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_clean)
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_data)
# Check structure
str(spotify_data)
# Find the top 10 genres
top_genres <- spotify_clean %>%
count(genre, sort = TRUE) %>%
slice_max(n, n = 10)  # Use slice_max() instead of top_n()
# Filter dataset for top genres
spotify_top_genres <- spotify_clean %>%
filter(genre %in% top_genres$genre)
# Bar chart for top genres
ggplot(spotify_top_genres, aes(x = genre)) +
geom_bar(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Genres by Song Count",
x = "Genre",
y = "Number of Songs"
)
ggplot(spotify_clean, aes(x = danceability, y = energy, color = popularity)) +
geom_point(alpha = 0.7) +
scale_color_gradient(low = "blue", high = "red") +
theme_light() +
labs(
title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy",
color = "Popularity"
)
popularity_trend <- spotify_clean %>%
group_by(year) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE))
ggplot(popularity_trend, aes(x = year, y = avg_popularity)) +
geom_line(color = "darkblue", linewidth = 1.2) +
geom_point(color = "red", size = 2) +
theme_minimal() +
labs(
title = "Popularity Trend Over Time",
x = "Year",
y = "Average Popularity"
)
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(total_popularity = sum(popularity, na.rm = TRUE)) %>%
arrange(desc(total_popularity))
ggplot(artist_popularity[1:10, ], aes(x = reorder(artist_name, total_popularity), y = total_popularity)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Most Popular Artists on Spotify (2010–2023)",
x = "Artist",
y = "Total Popularity"
)
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(total_popularity = sum(popularity, na.rm = TRUE)) %>%
arrange(desc(total_popularity))
ggplot(artist_popularity[1:10, ], aes(x = reorder(artist_name, total_popularity), y = total_popularity)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Most Popular Artists on Spotify (2010–2023)",
x = "Artist",
y = "Total Popularity"
)
# Check for missing or invalid artist names
spotify_clean %>%
filter(is.na(artist_name) | artist_name == "")
# Check for missing or invalid artist names
# Check encoding of the artist_name column
unique(Encoding(spotify_clean$artist_name))
# Check for missing or invalid artist names
# Check encoding of the artist_name column
unique(Encoding(spotify_clean$artist_name))
# Aggregate total popularity by artist
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(total_popularity = sum(popularity, na.rm = TRUE)) %>%
arrange(desc(total_popularity))
# Plot: Most popular artist
ggplot(artist_popularity[1:10, ], aes(x = reorder(artist_name, total_popularity), y = total_popularity)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Most Popular Artists on Spotify (2010–2023)",
x = "Artist",
y = "Total Popularity"
)
# Rename columns
spotify_data <- spotify_data %>%
rename(
genre = "artist_genres",
popularity = "artist_popularity"
)
# Fix encoding issues in artist_name and remove invalid entries
spotify_clean <- spotify_data %>%
filter(popularity > 50) %>%                # Filter tracks with popularity > 50
mutate(                                   # Fix encoding for artist_name
artist_name = iconv(artist_name, from = "latin1", to = "UTF-8")
) %>%
filter(!is.na(artist_name) & artist_name != "")  # Remove rows with missing or blank artist names
# Find the top 10 genres
top_genres <- spotify_clean %>%
count(genre, sort = TRUE) %>%
slice_max(n, n = 10)  # Use slice_max() instead of top_n()
# Filter dataset for top genres
spotify_top_genres <- spotify_clean %>%
filter(genre %in% top_genres$genre)
# Bar chart for top genres
ggplot(spotify_top_genres, aes(x = genre)) +
geom_bar(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Genres by Song Count",
x = "Genre",
y = "Number of Songs"
)
ggplot(spotify_clean, aes(x = danceability, y = energy, color = popularity)) +
geom_point(alpha = 0.7) +
scale_color_gradient(low = "blue", high = "red") +
theme_light() +
labs(
title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy",
color = "Popularity"
)
popularity_trend <- spotify_clean %>%
group_by(year) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE))
ggplot(popularity_trend, aes(x = year, y = avg_popularity)) +
geom_line(color = "darkblue", linewidth = 1.2) +
geom_point(color = "red", size = 2) +
theme_minimal() +
labs(
title = "Popularity Trend Over Time",
x = "Year",
y = "Average Popularity"
)
# Aggregate total popularity by artist
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(total_popularity = sum(popularity, na.rm = TRUE)) %>%
arrange(desc(total_popularity))
# Plot: Most popular artist
ggplot(artist_popularity[1:10, ], aes(x = reorder(artist_name, total_popularity), y = total_popularity)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Most Popular Artists on Spotify (2010–2023)",
x = "Artist",
y = "Total Popularity"
)
#Artist Popularity vs. Total Songs:
artist_stats <- spotify_clean %>%
group_by(artist_name) %>%
summarize(
total_songs = n(),
total_popularity = sum(popularity, na.rm = TRUE),
avg_popularity = mean(popularity, na.rm = TRUE)
) %>%
arrange(desc(total_popularity))
# Plot
ggplot(artist_stats[1:10, ], aes(x = total_songs, y = total_popularity, size = avg_popularity, label = artist_name)) +
geom_point(alpha = 0.7, color = "blue") +
geom_text(vjust = -0.5, hjust = 0.5) +
theme_minimal() +
labs(
title = "Artist Popularity vs. Total Songs (Top 10 Artists)",
x = "Total Number of Songs",
y = "Total Popularity",
size = "Average Popularity"
)
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(total_popularity = sum(popularity, na.rm = TRUE)) %>%
arrange(desc(total_popularity))
ggplot(artist_popularity[1:10, ], aes(x = reorder(artist_name, total_popularity), y = total_popularity)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "Top 10 Most Popular Artists on Spotify (2010–2023)",
x = "Artist",
y = "Total Popularity"
)
library(ggrepel)
ggplot(top_10_artists, aes(x = total_songs, y = total_popularity, size = avg_popularity, label = artist_name)) +
geom_point(alpha = 0.7, color = "blue") +  # Bubble chart
geom_text_repel(aes(label = artist_name), size = 3, box.padding = 0.5, max.overlaps = Inf) +  # Dynamic labels
theme_minimal() +
labs(
title = "Artist Popularity vs. Total Songs (Top 10 Artists)",
x = "Total Number of Songs",
y = "Total Popularity",
size = "Average Popularity"
)
install.packages("ggrepel")
install.packages("ggrepel")
library(ggrepel)
ggplot(top_10_artists, aes(x = total_songs, y = total_popularity, size = avg_popularity, label = artist_name)) +
geom_point(alpha = 0.7, color = "blue") +  # Bubble chart
geom_text_repel(aes(label = artist_name), size = 3, box.padding = 0.5, max.overlaps = Inf) +  # Dynamic labels
theme_minimal() +
labs(
title = "Artist Popularity vs. Total Songs (Top 10 Artists)",
x = "Total Number of Songs",
y = "Total Popularity",
size = "Average Popularity"
)
artist_stats <- spotify_clean %>%
group_by(artist_name) %>%
summarize(
total_songs = n(),
total_popularity = sum(popularity, na.rm = TRUE),
avg_popularity = mean(popularity, na.rm = TRUE)
) %>%
arrange(desc(total_popularity))
ggplot(artist_stats[1:10, ], aes(x = total_songs, y = total_popularity, size = avg_popularity, label = artist_name)) +
geom_point(alpha = 0.7, color = "blue") +
geom_text(vjust = -0.5, hjust = 0.5) +
theme_minimal() +
labs(
title = "Artist Popularity vs. Total Songs (Top 10 Artists)",
x = "Total Number of Songs",
y = "Total Popularity",
size = "Average Popularity"
)
library(ggrepel)
# Aggregate artist stats
artist_stats <- spotify_clean %>%
group_by(artist_name) %>%
summarize(
total_songs = n(),  # Total number of songs
total_popularity = sum(popularity, na.rm = TRUE),  # Total popularity
avg_popularity = mean(popularity, na.rm = TRUE)  # Average popularity
) %>%
arrange(desc(total_popularity))
# Select top 10 artists
top_10_artists <- artist_stats %>%
slice_head(n = 10)  # Select top 10 rows
# Plot: Artist Popularity vs. Total Songs
ggplot(top_10_artists, aes(x = total_songs, y = total_popularity, size = avg_popularity, label = artist_name)) +
geom_point(alpha = 0.7, color = "blue") +  # Bubble chart
geom_text_repel(size = 4, box.padding = 0.3, max.overlaps = Inf) +  # Adjust text labels dynamically
theme_minimal() +
labs(
title = "Artist Popularity vs. Total Songs (Top 10 Artists)",
x = "Total Number of Songs",
y = "Total Popularity",
size = "Average Popularity"
)
library(knitr)
library(kableExtra)
genre_popularity <- spotify_clean %>%
group_by(genre) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE)) %>%
arrange(desc(avg_popularity))
genre_popularity %>%
head(10) %>%
kable("html", caption = "Top 10 Genres by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
library(knitr)
library(kableExtra)
genre_popularity <- spotify_clean %>%
group_by(genre) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE)) %>%
arrange(desc(avg_popularity))
genre_popularity %>%
head(10) %>%
kable("html", caption = "Top 10 Genres by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
library(kableExtra)
genre_popularity <- spotify_clean %>%
group_by(genre) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE)) %>%
arrange(desc(avg_popularity))
genre_popularity %>%
head(10) %>%
kable("html", caption = "Top 10 Genres by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
install.packages("stringr")
library(kableExtra)
library(stringr)
genre_popularity <- spotify_clean %>%
group_by(genre) %>%
summarize(avg_popularity = mean(popularity, na.rm = TRUE)) %>%
arrange(desc(avg_popularity))
genre_popularity %>%
head(10) %>%
kable("html", caption = "Top 10 Genres by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
library(kableExtra)
# Compute artist statistics
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(
total_songs = n(),
total_popularity = sum(popularity, na.rm = TRUE),
avg_popularity = mean(popularity, na.rm = TRUE)
) %>%
arrange(desc(avg_popularity)) %>%
slice_head(n = 10) %>%  # Select the top 10 artists
mutate(
avg_popularity = round(avg_popularity, 1),  # Round average popularity
total_popularity = round(total_popularity, 0)  # Round total popularity
)
# Generate the table
artist_popularity %>%
kable("html", caption = "Top 10 Artists by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover")) %>%
column_spec(1, bold = TRUE, width = "30%") %>%  # Bold artist names
column_spec(2:4, width = "20%")  # Adjust column widths
library(kableExtra)
# Compute artist statistics
artist_popularity <- spotify_clean %>%
group_by(artist_name) %>%
summarize(
total_songs = n(),
total_popularity = sum(popularity, na.rm = TRUE),
avg_popularity = mean(popularity, na.rm = TRUE)
) %>%
arrange(desc(avg_popularity)) %>%
slice_head(n = 10) %>%  # Select the top 10 artists
mutate(
avg_popularity = round(avg_popularity, 1),  # Round average popularity
total_popularity = round(total_popularity, 0)  # Round total popularity
)
# Generate the table
artist_popularity %>%
kable("html", caption = "Top 10 Artists by Average Popularity") %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover")) %>%
column_spec(1, bold = TRUE, width = "30%") %>%  # Bold artist names
column_spec(2:4, width = "20%")  # Adjust column widths
library(ggplot2)
# Prepare the data for heatmap
top_10_artists <- artist_popularity %>%
slice_head(n = 10)  # Select the top 10 artists
# Create the heatmap
ggplot(top_10_artists, aes(x = "", y = reorder(artist_name, total_popularity), fill = total_popularity)) +
geom_tile(color = "white") +  # Create the heatmap tiles
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Total Popularity") +  # Gradient for popularity
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "right"
) +
labs(
title = "Top 10 Most Popular Artists (Heatmap)",
y = "Artist",
fill = "Total Popularity"
)
---
title: "**Spotify Data Analysis (2010-2023)**"
```{r setup, include=FALSE}
## **Introduction**
This report explores Spotify data from 2010 to 2023, focusing on trends in music genres, artist performance, and track attributes. Using data visualization techniques, we uncover key insights into Spotify's music landscape, highlighting popular genres, artists, and track characteristics.
## **Data Overview**
The dataset contains information on tracks from Spotify between 2010 and 2023. It includes variables such as:
```{r load-data, echo=TRUE, message=FALSE}
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_data)
# Check structure
str(spotify_data)
# Data Cleaning
The dataset was cleaned by renaming variables for clarity and filtering tracks with a popularity score above 50 to focus on significant records.
```{r clean-data, echo=TRUE}
# Rename columns
spotify_data <- spotify_data %>%
rename(
genre = "artist_genres",
popularity = "artist_popularity"
)
# Fix encoding issues in artist_name and remove invalid entries
spotify_clean <- spotify_data %>%
filter(popularity > 50) %>%                # Filter tracks with popularity > 50
mutate(
artist_name = iconv(artist_name, from = "latin1", to = "UTF-8")
) %>%
filter(!is.na(artist_name) & artist_name != "")  # Remove rows with missing or blank artist names
library(ggplot2)
# Prepare the data for heatmap
top_10_artists <- artist_popularity %>%
slice_head(n = 10)  # Select the top 10 artists
# Create the heatmap
ggplot(top_10_artists, aes(x = "", y = reorder(artist_name, total_popularity), fill = total_popularity)) +
geom_tile(color = "white") +  # Create the heatmap tiles
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Total Popularity") +  # Gradient for popularity
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "right"
) +
labs(
title = "Top 10 Most Popular Artists (Heatmap)",
y = "Artist",
fill = "Total Popularity"
)
# Prepare the data for heatmap
top_10_artists <- artist_popularity %>%
slice_head(n = 10)  # Select the top 10 artists
# Create the heatmap
ggplot(top_10_artists, aes(x = "", y = reorder(artist_name, total_popularity), fill = total_popularity)) +
geom_tile(color = "white") +  # Create the heatmap tiles
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Total Popularity") +  # Gradient for popularity
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "right"
) +
labs(
title = "Top 10 Most Popular Artists (Heatmap)",
y = "Artist",
fill = "Total Popularity"
)
# Prepare the data for heatmap
top_10_artists <- artist_popularity %>%
slice_head(n = 10)  # Select the top 10 artists
# Create the heatmap
ggplot(top_10_artists, aes(x = "", y = reorder(artist_name, total_popularity), fill = total_popularity)) +
geom_tile(color = "white") +  # Create the heatmap tiles
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Total Popularity") +  # Gradient for popularity
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "right"
) +
labs(
title = "Top 10 Most Popular Artists (Heatmap)",
y = "Artist",
fill = "Total Popularity"
)
# Load libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load the dataset
spotify_data <- read_csv("~/BSB_Docs/Rmarkdown_Project/Spotify Playlist/playlist_2010to2023.csv")
# Preview the dataset
head(spotify_data)
# Check structure
str(spotify_data)
knitr::opts_chunk$set(echo = TRUE)
